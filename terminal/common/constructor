 #!/bin/bash

 #######################################################
 # The project constructor 
 #######################################################

logEnabled=true
projectName=$1
projectURL=projects/${1}
projectPath=$PWD

 ps1_old="$PS1"
 PS1="\$"
 user=$1

 red=1
 green=2
 yellow=3
 blue=4
 magenta=5
 cyan=6
 white=7
 norm=9 

cache=~/.cache/code-gathering

#***************************************************
# String Functions
#***************************************************
indexOf(){
return | awk -v string="$1" -v search="$2" 'BEGIN{print index(string,search)}'
}
substr(){
return | awk -v string="$1" -v indexStart="$2" 'BEGIN{print substr(string,indexStart)}'
}
substrl(){
return | awk -v s="$1" -v a="$2" -v b="$3" 'BEGIN{print substr(s,a,b)}'
}
replace(){
return | awk -v  -v regex="$1" replacement="$2" target="$3" 'BEGIN{print sub(regex,replacement,target)}'
}
between(){
local indexStart=$(($(indexOf "$1" "$2")+1))
local indexEnd=$(($(indexOf $(substr $1 $indexStart) $3 )-1))
return | substrl "$1" $indexStart $indexEnd
}
#***************************************************
# Find a line in a file containing a given string
# and return line's number
# ${1} String to search
# ${2} File Path
#***************************************************
findLine(){
return $(grep -n "${1}" "${2}" | awk -F: '{print $1}')
}
#***************************************************
# Append a line to file
# ${1} Line to add
# ${2} File Path
#***************************************************
addLine(){
echo ${1} >>${2}
}
#***************************************************
# Delete line at its given index
# ${1} Line number to delete
# ${2} File Path
#***************************************************
deleteLineAt(){
sed -i "${1} d" ${2}
}
 #********************************************************
 # Print instruction and read user's input
 #********************************************************
 readInput(){
 	tput bold
 	tput setaf $green;
 	echo -n "${1}: "
 	tput setaf $norm;
 	tput sgr0
 	read reply
 }
 #********************************************************
 # Press any key to continue
 #********************************************************
 pause(){
 	tput bold
 	tput setaf $magenta;
 	echo -n "[continue]"
 	tput invis
 	OLDCONFIG=`stty -g`
 	stty -icanon -echo min 1 time 0
 	dd count=1 2>/dev/null
 	stty $OLDCONFIG
 	tput sgr0
 	tput setaf $norm;
 }
 #********************************************************
 # Press any key to continue
 #********************************************************
 step(){
 	tput bold
 	tput setaf $yellow
 	echo "${1}"
 	tput sgr0
 	tput setaf $norm
pause
 }
 #********************************************************
 # Print information about something
 #********************************************************
 info(){
 	tput bold
 	tput setaf $blue
 	echo "${1}"
 	tput sgr0
 	tput setaf $norm;
 }
 #********************************************************
 # Ask a question and wait for a [y/n] response
 #********************************************************
 ask(){
 	tput bold
 	tput setaf $green;
 	echo -n "${1}"
 	read -s -n1 ans
 	tput setaf $norm;
 	tput sgr0
 	if [ $ans = y -o $ans = Y ]
 		then
echo " oh yeah!"
 		reply=true
 		return
 	elif [ $ans = n -o $ans = N ]
 		then 
echo " naaaah.."
 		reply=false
 		return
 	fi
 	ask $1
 }
 #****************************************************
 # Information not displayed on the terminal window
 # will be added to the log file
 #****************************************************
if [ -f log ]
then
rm log
fi
log(){
if $logEnabled
then
echo ${1} >>log
fi
}
 #****************************************************
 # Include scripts from an online repository
 #****************************************************
getCommon(){
get ${baseURL}/common/${1} ${cache}/common/${1}
}
getLocal(){
get ${baseURL}/projects/${projectName}/${1} ${cache}/${projectName}/${1}
}
get(){
if [ -f ${2} ]
then
log "Using cached file: ${2}"
else
tput setaf $magenta
curl -# ${1} > ${2}
tput setaf $norm;
fi
}
 #*************************************************
 # Functions for multiple options selection
# ${1} An array of titles for each option 
# ${2} An array of callbacks when a specific indexed
#      is selected
# ${3} The statement to run when option is selected
 #*************************************************

options(){

#-----------------------------------------
# Get Arrays from arguments
#------------------------------------------

declare -a titles=("${!1}")
declare -a callbacks=("${!2}")
local command=${3}

#-----------------------------------------
# Print indexed option titles as given
#------------------------------------------

local i=1
for title in "${titles[@]}"
do
echo "[${i}] ${title}"
((i++))
done

#---------------------------
# Read answer from user 
# collect callback (${2})
# and run command (${3})
#---------------------------

getOption(){
read -s -n1 ans
if [ ! $(echo "$ans" | grep -E "^[1-${#callbacks[@]}]+$") ]
then
getOption
return
fi
callback=${callbacks[$(( $ans - 1 ))]}
eval $command
}

#-----------------------------------
# Init the option selection  
#-----------------------------------

getOption
}

 #****************************************************
 # Add to source when a script depends on another
 # Resolves conflicts with the source command
 #****************************************************

dependencies=()
depends(){
for dependency in "$@"
do 
if [ -z ${dependencies[$dependency]} ]
then
dependencies[$dependency]=true
getCommon ${dependency}
source ${cache}/common/${dependency}
fi
done
}

 #****************************************************
 # Prompt user to run commands with root privileges
 #****************************************************

sudoer(){
ask "Do you want to run commands with root privileges?"
if $reply
then
local line='${USER} ALL=(ALL) NOPASSWD:ALL'
local path="/etc/sudoers"
local lineNum=$(findLine ${line} ${path})
if [ $lineNum = 0 ]
then
sudo sh -c "echo ${line} >> ${path}"
else
info "Already a sudoer"
fi
else
if [ $lineNum = 0 ]
then
info "Not a sudoer"
else
deleteLineAt $lineNum $path
info "Removed your root privileges"
fi
return false
fi
return true
}

#*************************************************
# Check if baseURL is already defined
#*************************************************

if [ -z "$baseURL" ]
then
if [ -z "${2}" ]
then
echo "Cannot start constructor without a baseURL"
exit
else
baseURL=${2}
fi
else
log "baseURL has already value: ${baseURL}"
fi


