 #!/bin/bash

 #********************************************************
 # The project constructor 
 #********************************************************

logEnabled=true
projectName=$1
projectURL=projects/${1}
projectPath=$PWD

 ps1_old="$PS1"
 PS1="\$"
 user=$1

 red=1
 green=2
 yellow=3
 blue=4
 magenta=5
 cyan=6
 white=7
 norm=9 

base="https://raw.github.com/rvaronos/code-gathering/master/terminal"


 #********************************************************
 # Print instruction and read user's input
 #********************************************************

 readInput(){
 	tput bold
 	tput setaf $green;
 	echo -n "${1}: "
 	tput setaf $norm;
 	tput sgr0
 	read reply
 }

 #********************************************************
 # Press any key to continue
 #********************************************************

 pause(){
 	tput bold
 	tput setaf $magenta;
 	echo -n "[continue]"
 	tput invis
 	OLDCONFIG=`stty -g`
 	stty -icanon -echo min 1 time 0
 	dd count=1 2>/dev/null
 	stty $OLDCONFIG
 	tput sgr0
 	tput setaf $norm;
 }

 #********************************************************
 # Press any key to continue
 #********************************************************

 step(){
 	tput bold
 	tput setaf $yellow
 	echo "${1}"
 	tput sgr0
 	tput setaf $norm;
 }

 #********************************************************
 # Print information about something
 #********************************************************

 info(){
 	tput bold
 	tput setaf $blue
 	echo "${1}"
 	tput sgr0
 	tput setaf $norm;
 }

 #********************************************************
 # Ask a question and wait for a [y/n] response
 #********************************************************

 ask(){
 	tput bold
 	tput setaf $green;
 	echo -n "${1}"
 	read -s -n1 ans
 	tput setaf $norm;
 	tput sgr0
 	if [ $ans = y -o $ans = Y ]
 		then
echo " oh yeah!"
 		reply=true
 		return
 	elif [ $ans = n -o $ans = N ]
 		then 
echo " naaaah.."
 		reply=false
 		return
 	fi
 	ask $1
 }

 #****************************************************
 # Information not displayed on the terminal window
 # will be added to the log file
 #****************************************************

if [ -f log ]
then
rm log
fi

log(){
if $logEnabled
then
echo $1 >>log;
fi
}

 #****************************************************
 # Include scripts from an online repository
 #****************************************************

include(){
if [ -f $2 ]
then
log "Using cached file: ${2}"
else
get ${1} ${2}
fi
source ${2}
}

get(){
tput setaf $magenta
curl -# ${base}/${1}/${2} > ~/.cache/code-gathering/${projectName}/${2}
tput setaf $norm;
}

 #*************************************************
 # Functions for multiple options selection
 #*************************************************

getOption(){
read -s -n1 ans
${optionFunc[$(( $ans - 1 ))]}
}

option(){
optionFunc=(${@} getOption)
getOption
}

printOptions(){
local i=1
for option in "$@"
do
echo "[${i}] ${option}"
((i++))
done
echo "[${i}] Exit"
}

 #*************************************************
 # Startup Information and settings
 #*************************************************

info "When you see [continue], press any key after you have followed instructions"
 step "Try it now to start the configuration :)"
 pause;


